import asyncio
import re
from telethon import TelegramClient, events, errors
import aiosqlite 
from datetime import datetime, timedelta
from telethon.tl.functions.channels import GetParticipantsRequest as GetParticipants
from telethon.tl.types import ChannelParticipantsSearch
import sys
from telethon.tl.types import InputPeerChannel


async def api():
    while True:
        try:
            game = await aiosqlite.connect('TEST99.db')
            cur = await game.cursor()
            await cur.execute('''CREATE TABLE IF NOT EXISTS api (api_id TEXT, api_hash TEXT)''')
            await cur.execute('SELECT api_id, api_hash FROM api')  # Fetch both values in one query
            row = await cur.fetchone()
            
            if not row:
                api_id = str(input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ API ID: "))
                api_hash = input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ API Hash: ")
                
                try:
                    if len(api_id) == 8 and len(api_hash) == 32 and api_hash.isalnum():
                        ins = """
                            INSERT INTO api (api_id, api_hash)
                            VALUES (?, ?);
                        """
                        await cur.execute(ins, (api_id, api_hash))
                        await game.commit()
                        print("API ID –∏ API Hash –≤–∞–ª–∏–¥–Ω—ã. –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                        return api_id, api_hash
                        
                    else:
                        print("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è API ID –∏–ª–∏ API Hash. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                except ValueError:
                    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è API ID –∏ API Hash.")
            else:
                return row[0], row[1]  # Return the values from the fetched row
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            await cur.close()
            await game.close()

upt = None  

async def open_database():
    game = await aiosqlite.connect('TEST99.db')
    cur = await game.cursor()
    await cur.execute('''CREATE TABLE IF NOT EXISTS dov (user_id INTEGER PRIMARY KEY, username TEXT)''')
    await cur.execute('CREATE TABLE IF NOT EXISTS dovpref (user_id INTEGER PRIMARY KEY, pref TEXT)')
    await cur.execute('''
        CREATE TABLE IF NOT EXISTS zlst (
            user INTEGER PRIMARY KEY,
            res INTEGER,
            data TEXT
        )
    ''')
    return game, cur

async def close_database(game):
    await game.close()

async def close_database(game):
    await game.close()

async def get_user_data(cur, user_id):
    await cur.execute(f'SELECT * FROM dov WHERE user_id={user_id}')
    dov_users = await cur.fetchone()
    await cur.execute('SELECT pref FROM dovpref')
    pref_value = await cur.fetchone()
    pref_value = str(pref_value[0]) 
    return dov_users, pref_value
    
async def get_lab_message(client):
    try:
        lab = await client.get_messages(6333102398, limit=1)
        return lab[0] if lab else None
    except errors.RPCError as e:
        print(f"Error getting lab message: {e}")
        return None

async def delete_message(client, chat_id, message_id):
    try:
        await client.delete_messages(chat_id, message_id)
    except errors.RPCError as e:
        print(f"Error deleting message: {e}")

async def send_message(client, chat_id, text):
    try:
        return await client.send_message(chat_id, text)
    except errors.RPCError as e:
        print(f"Error sending message: {e}")
        return None

async def dovla(event, user_id, cur, client):
    sender = event.sender_id
    dov_users, pref_value = await get_user_data(cur, sender)

    lab = await get_lab_message(event.client)

    if not lab:
        return

    if (dov_users and dov_users[0] == sender):
        try:
            message = await send_message(event.client, 6333102398, '–ë–∏–æ–ª–∞–±')
            sms = ""
            edited_message = await event.reply("–û–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(1)

            lab = await client.get_messages(6333102398, limit=1)
            await client.send_read_acknowledge(6333102398)
            msg = lab[0].text.splitlines()
            for i in msg:
                if "üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
                    s = i.replace("üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:", "")
                    s = s.split('(')[0].strip()
                    sms += f"üß™ `{s}`\n"
                    
                if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
                    s = i.replace("‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç: ", "")
                    sms += f"üí∏ `{s}`\n"
                    
                if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
                    s = i.replace("üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å: ", "")
                    sms += f"üí∂ `{s}`\n"
                    
                if "ü•¥ –£ –≤–∞—Å –≥–æ—Ä—è—á–∫–∞" in i:
                    s = i.split('`')[1].strip() and i.split('–µ—â—ë')[1].strip()
                    sms += f"üíâ {s}\n"
                    
            if msg == None:
                return
              
            await edited_message.edit(sms, parse_mode='markdown')
                
        except errors.RPCError as e:
            print(f"Error in '–ª–∞' command: {e}")
            
            
async def la(event, user_id, cur, client):
    sender = event.sender_id

    lab = await get_lab_message(event.client)

    if not lab:
        return

   

    if sender == user_id:
        try:
            message = await send_message(event.client, 6333102398, '–ë–∏–æ–ª–∞–±')
            sms = ""
            edited_message = await event.edit("–û–∂–∏–¥–∞–Ω–∏–µ")
            await asyncio.sleep(1)

            lab = await client.get_messages(6333102398, limit=1)
            await client.send_read_acknowledge(6333102398)
            msg = lab[0].text.splitlines()
            for i in msg:
                if "üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
                    s = i.replace("üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:", "")
                    s = s.split('(')[0].strip()
                    sms += f"üß™ `{s}`\n"
                    
                if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
                    s = i.replace("‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç: ", "")
                    sms += f"üí∏ `{s}`\n"
                    
                if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
                    s = i.replace("üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å: ", "")
                    sms += f"üí∂ `{s}`\n"
                    
                if "ü•¥ –£ –≤–∞—Å –≥–æ—Ä—è—á–∫–∞" in i:
                    s = i.split('`')[1].strip() and i.split('–µ—â—ë')[1].strip()
                    sms += f"üíâ {s}\n"
                    
            if msg == None:
                return
              
            await edited_message.edit(sms, parse_mode='markdown')
                
        except errors.RPCError as e:
            print(f"Error in '–ª–∞' command: {e}")            


async def ub(event, user_id, client):
    try:
        sender = event.sender_id
        if sender == user_id:
            me = await client.get_me()
            now = datetime.now()
            uptime_delta = now - upt
            hours, remainder = divmod(uptime_delta.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            ping_message = (
                "<pre>"
                "<code>"
                "{\n"
                f"   <b>\"üí† Cluster\":</b> \"Stable2.4\",\n"
                f"   <b>\"üö∏ –í–ª–∞–¥–µ–ª–µ—Ü\":</b> \"{me.first_name}\",\n"
                "}"
                "</code>"
                "</pre>"
                "<pre>"
                "<code>"
                "{\n"
                f"   <b>\"üïØÔ∏è –ê–ø—Ç–∞–π–º\" : \"{hours}—á {minutes}–º {seconds}—Å\"</b>\n"
                "}"
                "</code>"
                "</pre>"
            )

            await event.edit(ping_message, parse_mode='html')
            
        else:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ping: {e}")
        
async def dovub(event, cur, client):
    try:
        sender = event.sender_id        
        dov_users, pref_value = await get_user_data(cur, sender)
        print(f"{dov_users} and {dov_users[0]}")
        if (dov_users and dov_users[0]) == sender:
            me = await client.get_me()
            now = datetime.now()
            uptime_delta = now - upt
            hours, remainder = divmod(uptime_delta.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            ping_message = (
                "<pre>"
                "<code>"
                "{\n"
                f"   <b>\"üí† Cluster\":</b> \"Stable2.4\",\n"
                f"   <b>\"üö∏ –í–ª–∞–¥–µ–ª–µ—Ü\":</b> \"{me.first_name}\",\n"
                "}"
                "</code>"
                "</pre>"
                "<pre>"
                "<code>"
                "{\n"
                f"   <b>\"üïØÔ∏è –ê–ø—Ç–∞–π–º\" : \"{hours}—á {minutes}–º {seconds}—Å\"</b>\n"
                "}"
                "</code>"
                "</pre>"
            )

            await event.reply(ping_message, parse_mode='html')

        else:
            print("eblan")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ping: {e}")        
        

async def doh(event, user_id, client):
    try:
        sender = event.sender_id
            
        if sender == user_id:
            message = await client.send_message(6333102398, '–ë–∏–æ–µ–∂–∞')
            await event.edit("–û–∂–∏–¥–∞–µ–º")
            await asyncio.sleep(1,5)
            lab = (await client.get_messages(6333102398, limit=1))[0]
            msg = lab.text.splitlines()
            sms = ""

            for i in msg:
                if "ü§í –ò—Ç–æ–≥–æ" in i:
                    s = i.replace('ü§í –ò—Ç–æ–≥–æ ', '')
                    s = ''.join(c for c in s if c.isdigit())
                    sms += f"üìï `{s}`\n"
                if 'üß¨ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:' in i:
                    s = i.replace('üß¨ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ', '')
                    s = ''.join(c for c in s if c.isdigit())
                    sms += f"üí∂ `{s}`\n"
                    sint = int(s)
                    min = round(sint/1440, 1)
                    sms += f"‚è≥ `{min}`\n"
                    

            await client.send_read_acknowledge(lab.chat_id)
            await client.delete_messages(6333102398, message)
            await client.delete_messages(6333102398, lab)

            await event.edit(sms, parse_mode='markdown')
        else:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ bioeagle: {e}")


async def dos(event, user_id, cur, client):
    try:
        sender = event.sender_id
        if sender == user_id:
            message = await client.send_message(6333102398, '–ë–∏–æ–ª–∞–±')
            await event.edit("–û–∂–∏–¥–∞–µ–º")
            await asyncio.sleep(1,5)
            lab = (await client.get_messages(6333102398, limit=1))[0]
            msg = lab.text.splitlines()
            sms = ""
            for i in msg:
                if "üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
                    s = i.replace('üß™ –ü–∞—Ç–æ–≥–µ–Ω–æ–≤: ', '')
                    sms += f"üß™ {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "üë®üèª‚Äçüî¨ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:" in i:
                    s = i.replace('üë®üèª‚Äçüî¨ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: ', '')
                    sms += f"üë®üèª‚Äçüî¨ {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å:" in i:
                    s = i.replace('ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å: ', '')
                    sms += f"ü¶† {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç:" in i:
                    s = i.replace('üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç: ', '')
                    sms += f"üõ° {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å:" in i:
                    s = i.replace('‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å: ', '')
                    sms += f"‚ò†Ô∏è {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:" in i:
                    s = i.replace('üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ', '')
                    sms += f"üïµÔ∏è‚Äç‚ôÇÔ∏è {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
                    s = i.replace('‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç: ', '')
                    sms += f"‚ò£Ô∏è {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
                    s = i.replace('üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å: ', '')
                    sms += f"üß¨ {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "üò∑ –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π:" in i:
                    s = i.replace('üò∑ –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π: ', '')
                    sms += f"üò∑ {s}\n"
                    sms = sms.split('(')[0].strip()
                    sms += "\n"
                if "ü•Ω –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã:" in i:
                    s = i.replace('ü•Ω –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω—ã: ', '')
                    sms += f"ü•Ω {s}"
                    sms = sms.split('(')[0].strip()
                    
               
            await client.send_read_acknowledge(lab.chat_id)   
            await client.delete_messages(6333102398, lab)
            if sms:                
                await client.delete_messages(6333102398, message)

            await event.edit(sms, parse_mode='html')
        else:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ dos: {e}")
    
async def help(event, user_id, cur, game):
    sender = event.sender_id
    await cur.execute('SELECT user_id FROM dov')
    dov_users = await cur.fetchall()
    

    if sender == user_id:
        sms = ""
        if dov_users:
            dov_list = '\n'.join([f'<code>@{user[0]}</code>' for user in dov_users])
            sms += f'    üìó –î–æ–≤—ã :    \n\n{dov_list}\n'
            await event.edit(sms, parse_mode='html')
        else:
            sms += f'  üìó –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é.\n'
            await event.edit(sms, parse_mode='html')
    else:
        print("daun")
    
async def dov(event, cur, game, user_id):
    try:
        sender = event.sender_id
        if sender == user_id:
            reply = await event.get_reply_message()
            if not reply:
                neotv = f"<b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
                await event.edit(neotv, parse_mode='html')
            else:
                user = reply.sender
                userid = user.id
                if userid == user_id:
                    await event.reply(f"–ö–∞–ª–µ–∫–∞ –µ–±–∞–Ω–∞—è –Ω–∞—Ö—É—è –æ–≤–Ω–µ—Ä—É –≤ –¥–æ–≤–µ—Ä–∫—É")
                    return
                username = user.username or f"user{userid}"
                await cur.execute(f'SELECT user_id FROM dov WHERE user_id={userid}')
                dov = await cur.fetchone()
                if dov:
                    await cur.execute('DELETE FROM dov WHERE user_id = ?', (userid,))
                    await game.commit()
                    name = f"{user.first_name}"
                    dovdob = f"üö¨ <b>{name}</b> —É–¥–∞–ª–µ–Ω –∏–∑ –¥–æ–≤–µ—Ä–∫–∏\n"
                    await event.edit(dovdob, parse_mode='html')
                else:
                    await cur.execute('INSERT INTO dov (user_id, username) VALUES (?, ?)', (userid, username))
                    await game.commit()
                    name = f"{user.first_name}"
                    dovdob = f"üö¨ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–∫—É\n"
                    await event.edit(dovdob, parse_mode='html')
        else:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ dov: {e}")
        
async def pref(event, user_id, cur, game):
    try:
        sender = event.sender_id
        if sender == user_id:
            command_parts = event.text.split(' ', 1)

            if len(command_parts) > 1:
                pref_value = command_parts[1].strip()

                await cur.execute('DELETE FROM dovpref WHERE user_id = ?', (user_id,))
                await game.commit()

                await cur.execute('INSERT INTO dovpref (user_id, pref) VALUES (?, ?)', (user_id, pref_value))
                await game.commit()

                success_message = f"**–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å: `{pref_value}`**"
                await event.respond(success_message, parse_mode='markdown')
            else:
                error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã."
                await event.respond(error_message)
        else:
            print('daun')
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è pref: {e}"
        print(error_message)


async def cmd(event, user_id, cur, game):    
    try:
        await cur.execute('SELECT pref FROM dovpref')
        dovpref = await cur.fetchone()
        dovpref_value = dovpref[0] if dovpref else ''
        sender = event.sender_id
        if sender == user_id:
            sms = (
                f"**[CLUSTER 2.4]**(tg://openmessage?user_id=6307195353)\n"
                "    **__-> –ü—Ä–µ—Ñ (–∑–Ω–∞—á–µ–Ω–∏–µ)__** > —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å\n"
                f"    **__-> –î–æ–≤__** > –æ–Ω–ª–∏ —Ä–µ–ø–ª–∞–π, –¥–∞—Ç—å/—Å–Ω—è—Ç—å –¥–æ–≤–µ—Ä–∫—É\n"
                f"    **__-> –î–æ–≤—ã__** > —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\n"
                f"    **__-> –î–æ—Å__** > –ø–æ–ª–Ω–∞—è –ª–∞–±–∞\n"
                f"    **__-> –õ–∞__** > –∫—Ä–∞—Ç–∫–∞—è –ª–∞–±–∞\n"
                f"    **__-> –ó (—Ö)__** > —á–µ–∫ (—Ö = –∞–π–¥–∏/—Å—Å—ã–ª–∫–∞) (—Ö = –Ω–æ–º–µ—Ä –∞–π–¥–∏ –ø—Ä–∏ —Ä–µ–ø–ª–∞–µ –Ω–∞ \'–∑–∑\') –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–ø–ª–∞–µ–º\n"
                f"    **__-> –ï–∂–∞__** > –æ–±—â–∞—è/–µ–∂–µ–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–µ–º–∏—è\n"
                f"    **__-> –Æ–±__** > –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
                f"    **__-> –•–∏__** > –ª–µ—á–µ–Ω–∏–µ\n"
                f"    **__-> –ï–± (—Ö)__** > –∑–∞—Ä–∞–∂–µ–Ω–∏–µ (—Ö = –∞–π–¥–∏/—Å—Å—ã–ª–∫–∞) (—Ö = –Ω–æ–º–µ—Ä –∞–π–¥–∏ –ø—Ä–∏ —Ä–µ–ø–ª–∞–µ –Ω–∞ \'–∑–∑\') –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Ä–µ–ø–ª–∞–µ–º\n"
                f"    **__-> –ó–∞—Ä (—Ö)__** > –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–ª–∏—Å—Ç–∞ (—Ö = –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)\n"
                f"    **__-> –ñ–¥ (—Ö) (—Ä–µ—Å—É—Ä—Å—ã)__** > –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ (—Ö = –∞–π–¥–∏/—Å—Å—ã–ª–∫–∞)\n"
                f"    **__-> –ó–∑__** > —á–µ–∫ –±–∏–æ—Ç–æ–ø–∞\n"
                f"    **__-> –ü–∏–Ω–≥__** > —Ç–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ —Ç–≥\n"
                f"    **__-> –§–∞—Ä–º__** > –∞–≤—Ç–æ—Ñ–∞—Ä–º –∫–æ–∏–Ω–æ–≤" 
            )
            
            await event.edit(sms, parse_mode = 'markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cmd: {e}")
    
async def farm(event, cur, game, user_id):
    try:
        sender = event.sender_id        
        if sender == user_id:
            while True:
                await event.respond('–ë–∏–æ—Ñ–µ—Ä–º–∞')
                await asyncio.sleep(3610*4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ farm: {e}")


async def vac(event, cur, user_id, client):
    try:
        sender = event.sender_id
            
        if sender == user_id:
            message = await client.send_message(6333102398, '—Ö–∏–ª')
            await event.edit("–û–∂–∏–¥–∞–µ–º")
            await asyncio.sleep(1.5)
            heal = (await client.get_messages(6333102398, limit=1))[0]
            msg = heal.text.splitlines()
            sms = ""
            for i in msg:
                if "ü§ì–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å—Ü–µ–ª–∏–ª–∏—Å—å!" and "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ" in i:
                    sms += f"‚öïÔ∏è–ò—Å—Ü–µ–ª–µ–Ω\n"
                if "üòÉ –£ –≤–∞—Å –Ω–µ—Ç—É –≥–æ—Ä—è—á–∫–∏!" in i:
                    s = "üíä –ì–æ—Ä—è—á–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    sms += f"{s}"
                    

            await client.send_read_acknowledge(6333102398)
            await client.delete_messages(6333102398, heal)
            

            await event.edit(sms, parse_mode='markdown')
            
        else:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ heal: {e}")    
        
        
async def dovvac(event, user_id, cur, client):
    try:
        sender = event.sender_id        
        dov_users, pref_value = await get_user_data(cur, sender)
        if (dov_users and dov_users[0] == sender):
            message = await client.send_message(6333102398, '—Ö–∏–ª')
            sms = ""
            healmsg = await event.respond("–û–∂–∏–¥–∞–µ–º")
            await asyncio.sleep(1.5)
            heal = (await client.get_messages(6333102398, limit=1))[0]
            msg = heal.text.splitlines()
            for i in msg:
                if "ü§ì–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å—Ü–µ–ª–∏–ª–∏—Å—å!" and "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ" in i:
                    sms += f"‚öïÔ∏è–ò—Å—Ü–µ–ª–µ–Ω\n"
                if "üòÉ –£ –≤–∞—Å –Ω–µ—Ç—É –≥–æ—Ä—è—á–∫–∏!" in i:
                    s = "üíä –ì–æ—Ä—è—á–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    sms += f"{s}"
                    

            await client.send_read_acknowledge(6333102398)
            await client.delete_messages(6333102398, heal)
            

            await healmsg.edit(sms, parse_mode='markdown')
            
        else:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ heal: {e}")            


async def zins(event, user_id, cur, game, client):
    try:
        sender = event.sender_id
        if sender == user_id:
            command_parts = event.text.split(' ', 1)
            if len(command_parts) > 1:
                insert = command_parts[1].strip()
                user_id_match = re.search(r'(?<=@)[a-z0-9_]+', insert, re.I)
                t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', insert, re.I)
                open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', event.text)
        
                if user_id_match:
                    user = user_id_match.group(0)
                elif t_me_match:
                    user = t_me_match.group(0)
                elif open_message_match:
                    user = open_message_match.group(0)
                else:
                    user = None
                    return
                
                res, data = await zlstd(user, cur, client, game)
                res = str(res)
                if user and res is not None and data is not None:
                    if not (res and data) == str(0):
                        zmsg1 = f"üö∏ `@{user}`\nüí∏ `{res.replace(' ', '')}`\nüñãÔ∏è `Ô∏è{data}`"
                        await event.edit(zmsg1, parse_mode='markdown')
                    else:
                        res, data = await zlstd(user, cur, client, game)
                        res = str(res)
                        if user and res is not None and data is not None:
                            if not (res and data) == str(0):
                                zmsg1 = f"üö∏ `@{user}`\nüí∏ `{res.replace(' ', '')}`\nüñãÔ∏è `Ô∏è{data}`"
                                await event.edit(zmsg1, parse_mode='markdown')
                            else:
                                zars = (
                                                f"üö∏ `@{user}`\n"
                                                f"üí§ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ"
                                            )
                                await event.edit(zars, parse_mode='markdown')
                else:
                    pass
        else:
            pass
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {e}"
        print(error_message)


async def dovzins(event, user_id, cur, game, client):
    try:
        sender = event.sender_id
        dov_users, pref_value = await get_user_data(cur, sender)
        if (dov_users and dov_users[0] == sender):
            command_parts = event.text.split(' ', 1)
            if len(command_parts) > 1:
                insert = command_parts[1].strip()
                user_id_match = re.search(r'(?<=@)[a-z0-9_]+', insert, re.I)
                t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', insert, re.I)
                open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', event.text)
        
                if user_id_match:
                    user = user_id_match.group(0)
                elif t_me_match:
                    user = t_me_match.group(0)
                elif open_message_match:
                    user = open_message_match.group(0)
                else:
                    user = None
                    return
                
                res, data = await zlstd(user, cur, client, game)
                res = str(res)
                if user and res is not None and data is not None:
                    if not (res and data) == str(0):
                        zmsg1 = f"üö∏ `@{user}`\nüí∏ `{res.replace(' ', '')}`\nüñãÔ∏è `Ô∏è{data}`"
                        await event.reply(zmsg1, parse_mode='markdown')
                    else:
                        res, data = await zlstd(user, cur, client, game)
                        res = str(res)
                        if user and res is not None and data is not None:
                            if not (res and data) == str(0):
                                zmsg1 = f"üö∏ `@{user}`\nüí∏ `{res.replace(' ', '')}`\nüñãÔ∏è `Ô∏è{data}`"
                                await event.reply(zmsg1, parse_mode='markdown')
                            else:
                                zars = (
                                                f"üö∏ `@{user}`\n"
                                                f"üí§ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ"
                                            )
                                await event.reply(zars, parse_mode='markdown')
                else:
                    pass
                    
                    
                
        else:
            print('zdaun')
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {e}"
        print(error_message)


        
async def zlstd(user, cur, client, game):
    try:
        await cur.execute(f"SELECT res, data FROM zlst WHERE user = '{user}'")  
        row = await cur.fetchone()
        if row and len(row) == 2:
            res, data = row
            return res, data
        else:
            await cur.execute(f"SELECT res, data FROM zlst WHERE user = '{user}'")  
            row = await cur.fetchone()
            if row and len(row) == 2:
                res, data = row
                return res, data
            else:
                        res = str(0)
                        data = str(0)
                        return res, data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ: {e}")
        return None, None
        
        
        
    
async def autozar(event, client, user_id, cur, game):
    try:
        sender = event.sender_id
        if sender == 6333102398:
            user_id = str(user_id)
            print('autozar started')
            match = re.search(fr'üòé \[.*?\]\(tg://openmessage\?user_id={re.escape(user_id)}\) –ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é \[.*?\]\(tg://openmessage\?user_id=(\d+)\)', event.text)
            match2 = re.search(fr'‚ò£Ô∏è –ñ–µ—Ä—Ç–≤–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç __([\d ]+) –±–∏–æ-—Ä–µ—Å—É—Ä—Å–∞__', event.text)
            match3 = re.search(fr'‚ò†Ô∏è –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ __(\d+) –¥–Ω–µ–π__', event.text)

            if match and match2 and match3:
                user = match.group(1)
                print(f'{user}')
                res, data = await zlstd(user, cur, client, game)
                res2 = res
                data = data
                await asyncio.sleep(1)
                print(res2)
                res = int(match2.group(1).replace(' ', ''))  
                print(f'{res2} -> {res}')
                zartime = int(match3.group(1))
                print(f'{zartime}')
                current_date = datetime.now()
                expiration_date = current_date + timedelta(days=zartime)
                data = expiration_date.strftime('%d.%m.%Y')

                try:
                    # –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    insert_query = """
                        INSERT OR REPLACE INTO zlst (user, res, data)
                        VALUES (?, ?, ?);
                    """
                    await cur.execute(insert_query, (user, res, data))
                    
                    # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    update_query = """
                        UPDATE zlst SET res = ?, data = ? WHERE user = ?;
                    """
                    await cur.execute(update_query, (res, data, user))
                    await game.commit()
                    
                   
                    res_change = int(res) - int(res2)
                    zars = (
                        f"üö∏ `@{user}` —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n"
                        f"üí∏ ~~{res2}~~ -> **{res}** // {'+' if res_change >= 0 else ''}{res_change}\n"
                        f"üñãÔ∏è `{data}`"
                    )

                    await event.reply(zars, parse_mode='markdown')

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞—Ä: {e}")
                    pass

            else:
                print('No match found')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ autozar: {e}")





async def z(client, event, user_id, cur, game):
    try:
        if event.is_reply:  
            sender = event.sender_id
            if sender == user_id:
                user_id = str(user_id)
                msg = await event.get_reply_message()
                msg = msg.text.lower()
                print(f"{msg}")
                match = None
                
                if "üë®üèª‚Äçüî¨ –±—ã–ª–∞" in msg or "üë∫ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–∞–∑–∏—Ç—å" in msg:
                    match = re.search(r"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                    
                elif "üòé" in msg and "–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é" in msg:
                    match = re.search(r"–∑–∞—Ä–∞–∂–µ–Ω–∏—é \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                else:
                    
                        pizda = re.findall(r'((t\.me/[a-z0-9_]+)|(tg://(openmessage\?user_id=[a-z0-9_]+)|(tguser\?id=[a-z0-9_]+))|(@[a-z0-9_]+))', msg, re.I)
                        if pizda:
                            match = pizda[0][0]
                            user_id_match = re.search(r'(?<=@)[a-z0-9_]+', match, re.I)
                            t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', match, re.I)
                            open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', match)
                    
                            if user_id_match:
                                match = user_id_match.group(0)
                            elif t_me_match:
                                match = t_me_match.group(0)
                            elif open_message_match:
                                match = open_message_match.group(0)
                            else:
                                match = None
                                return
                            
                        else:
                            if event.is_reply:
                                reply = await event.get_reply_message()
                                match = reply.sender_id
                                    
                
                if match:
                        user = match
                        print(f"{user}")
                        res, data = await zlstd(user, cur, client, game)
                        print(f"{res} {data}")
                        if not (res and data) == str(0):
                            
                            zars = (
                                f"üö∏ `@{user}`\n"
                                f"üí∏ `{res}`\n" 
                                f"üñãÔ∏è `{data}`"
                            )
                            await event.edit(zars, parse_mode='markdown')
                        else:
                            res, data = await zlstd(user, cur, client, game)
                            print(f"nananana2")
                            if not (res and data) == str(0):
                                
                                zars = (
                                    f"üö∏ `@{user}`\n"
                                    f"üí∏ `{res}`\n" 
                                    f"üñãÔ∏è `{data}`"
                                )
                                await event.edit(zars, parse_mode='markdown')
                            else:
                               zars = (
                                    f"üö∏ `@{user}`\n"
                                    f"üí§ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ"
                                )
                               await event.edit(zars, parse_mode='markdown')
                        
                else:
                        print("eshe huinya")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∑: {e}")
                        


async def dovz(client, event, user_id, cur, game):
    try:
        if event.is_reply:  
            sender = event.sender_id
            dov_users, pref_value = await get_user_data(cur, sender)
            print(f"{dov_users} and {dov_users[0]}")
            if (dov_users and dov_users[0]) == sender:
                user_id = str(user_id)
                msg = await event.get_reply_message()
                msg = msg.text.lower()
                print(f"{msg}")
                match = None
                
                if "üë®üèª‚Äçüî¨ –±—ã–ª–∞" in msg or "üë∫ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–∞–∑–∏—Ç—å" in msg:
                    match = re.search(r"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                    
                elif "üòé" in msg and "–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é" in msg:
                    match = re.search(r"–∑–∞—Ä–∞–∂–µ–Ω–∏—é \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                else:
                    pizda = re.findall(r'((t\.me/[a-z0-9_]+)|(tg://(openmessage\?user_id=[a-z0-9_]+)|(tguser\?id=[a-z0-9_]+))|(@[a-z0-9_]+))', msg, re.I)
                    if pizda:
                            match = pizda[0][0]
                            user_id_match = re.search(r'(?<=@)[a-z0-9_]+', match, re.I)
                            t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', match, re.I)
                            open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', match)
                    
                            if user_id_match:
                                match = user_id_match.group(0)
                            elif t_me_match:
                                match = t_me_match.group(0)
                            elif open_message_match:
                                match = open_message_match.group(0)
                            else:
                                match = None
                                return
                            
                    else:
                            if event.is_reply:
                                reply = await event.get_reply_message()
                                match = reply.sender_id
                                    
                
                if match:
                        user = match
                        print(f"{user}")
                        res, data = await zlstd(user, cur, client, game)
                        print(f"{res} {data}")
                        if not (res and data) == str(0):
                            
                            zars = (
                                f"üö∏ `@{user}`\n"
                                f"üí∏ `{res}`\n" 
                                f"üñãÔ∏è `{data}`"
                            )
                            await event.reply(zars, parse_mode='markdown')
                        else:
                            res, data = await zlstd(user, cur, client, game)
                            print(f"nananana2")
                            if not (res and data) == str(0):
                                
                                zars = (
                                    f"üö∏ `@{user}`\n"
                                    f"üí∏ `{res}`\n" 
                                    f"üñãÔ∏è `{data}`"
                                )
                                await event.reply(zars, parse_mode='markdown')
                            else:
                               zars = (
                                    f"üö∏ `@{user}`\n"
                                    f"üí§ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ"
                                )
                               await event.reply(zars, parse_mode='markdown')
                        
                else:
                        print("eshe huinya")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–≤–∑: {e}")



async def eb(client, event, user_id, cur, game):
    try:
        if event.is_reply:  
            sender = event.sender_id
            if sender == user_id:
                user_id = str(user_id)
                msg = await event.get_reply_message()
                msg = msg.text.lower()
                print(f"{msg}")
                match = None
                
                if "üë®üèª‚Äçüî¨ –±—ã–ª–∞" in msg or "üë∫ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–∞–∑–∏—Ç—å" in msg:
                    match = re.search(r"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                    
                elif "üòé" in msg and "–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é" in msg:
                    match = re.search(r"–∑–∞—Ä–∞–∂–µ–Ω–∏—é \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                else:
                    pizda = re.findall(r'((t\.me/[a-z0-9_]+)|(tg://(openmessage\?user_id=[a-z0-9_]+)|(tguser\?id=[a-z0-9_]+))|(@[a-z0-9_]+))', msg, re.I)
                    if pizda:
                            match = pizda[0][0]
                            user_id_match = re.search(r'(?<=@)[a-z0-9_]+', match, re.I)
                            t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', match, re.I)
                            open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', match)
                    
                            if user_id_match:
                                match = user_id_match.group(0)
                            elif t_me_match:
                                match = t_me_match.group(0)
                            elif open_message_match:
                                match = open_message_match.group(0)
                            else:
                                match = None
                                return
                            
                    else:
                            if event.is_reply:
                                reply = await event.get_reply_message()
                                match = reply.sender_id
                
                if match:
                        user = match
                        print(f"{user}")
                        
                        
                        await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {user}", parse_mode='markdown')
                else:
                        print("eshe huinya")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –µ–±: {e}")
        

async def doveb(client, event, user_id, cur, game):
    try:
        if event.is_reply:  
            sender = event.sender_id
            dov_users, pref_value = await get_user_data(cur, sender)
            print(f"{dov_users} and {dov_users[0]}")
            if (dov_users and dov_users[0]) == sender:
                user_id = str(user_id)
                msg = await event.get_reply_message()
                msg = msg.text.lower()
                print(f"{msg}")
                match = None
                
                if "üë®üèª‚Äçüî¨ –±—ã–ª–∞" in msg or "üë∫ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–∞–∑–∏—Ç—å" in msg:
                    match = re.search(r"–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                    
                elif "üòé" in msg and "–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é" in msg:
                    match = re.search(r"–∑–∞—Ä–∞–∂–µ–Ω–∏—é \[.*?\]\(tg://openmessage\?user_id=(\d+)\)", msg)
                    match = match.group(1)
                else:
                    pizda = re.findall(r'((t\.me/[a-z0-9_]+)|(tg://(openmessage\?user_id=[a-z0-9_]+)|(tguser\?id=[a-z0-9_]+))|(@[a-z0-9_]+))', msg, re.I)
                    if pizda:
                            match = pizda[0][0]
                            user_id_match = re.search(r'(?<=@)[a-z0-9_]+', match, re.I)
                            t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', match, re.I)
                            open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', match)
                    
                            if user_id_match:
                                match = user_id_match.group(0)
                            elif t_me_match:
                                match = t_me_match.group(0)
                            elif open_message_match:
                                match = open_message_match.group(0)
                            else:
                                match = None
                                return
                            
                    else:
                            if event.is_reply:
                                reply = await event.get_reply_message()
                                match = reply.sender_id
                
                if match:
                        user = match
                        print(f"{user}")
                        
                        await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {user}", parse_mode='markdown')
                else:
                        print("eshe huinya")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–≤–µ–±: {e}")

        
async def rawtext(client, event, user_id):
    try:        
        if event.is_reply:  
            sender = event.sender_id
            if sender == user_id:
                replied_message = await event.get_reply_message()
                sender_id = replied_message.sender_id
                sender = await client.get_entity(sender_id)
                await event.edit(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.username}:\n ```{replied_message.text}```")
            else:
                pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ rawtext: {e}")        
        
        
        
async def get_zarlist_page(cur, page_number, page_size=30):
    try:
        start_index = (page_number - 1) * page_size
        end_index = start_index + page_size

        await cur.execute("SELECT user, res, data FROM zlst")
        rows = await cur.fetchall()

        if start_index >= len(rows):
            pass

        total_pages = (len(rows) + page_size - 1) // page_size
        page_rows = rows[start_index:end_index]
        zar_list = []

        for index, row in enumerate(page_rows, start=start_index + 1):
            user, res, data = row
            zar_list.append(f"{index}. üö∏`@{user}` {'‚†Ä' * (12 - len(str(user)))} üí∏`{res}` {'‚†Ä' * (6 - len(str(res)))} üñãÔ∏è`{data}`\n")

        return total_pages, "".join(zar_list)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_zarlist_page: {e}")
        pass

async def zarlist(user_id, event, cur):
    try:
        sender = event.sender_id
        if sender == user_id: 
           if '–∑–∞—Ä' in event.text.lower():
                page_number = int(event.text.split()[1])
                total_pages, result = await get_zarlist_page(cur, page_number)
                if result:
                    await cur.execute("SELECT COUNT(*) FROM zlst")
                    user_count = await cur.fetchone()
                    user_count = user_count[0] if user_count else 0

                    sms = f"**üòà –ó–∞—Ä–ª–∏—Å—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:** {page_number}/{total_pages} üòà\n" + result + f"**üòà –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_count} üòà**"
                    await event.edit(sms, parse_mode='markdown')
                else:
                    print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_zarlist_command: {e}")
        pass


async def dovzarlist(user_id, event, cur):
    try:
        sender = event.sender_id
        dov_users, pref_value = await get_user_data(cur, sender)
        if (dov_users and dov_users[0] == sender):
           if '–∑–∞—Ä' in event.text.lower():
                page_number = int(event.text.split()[1])
                total_pages, result = await get_zarlist_page(cur, page_number)
                if result:
                    sms = f"**üòà –ó–∞—Ä–ª–∏—Å—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü–∞:** {page_number}/{total_pages} üòà\n" + result + "**üòà #=#=#=#=#=#=#=#=#=#=# üòà**"
                    await event.reply(sms, parse_mode='markdown')
                else:
                    print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_zarlist_command: {e}")
        pass


async def ebins(event, user_id, cur, game, client):
    try:
        sender = event.sender_id
        if sender == user_id:
            command_parts = event.text.split(' ', 1)
            if len(command_parts) > 1:
                insert = command_parts[1].strip()
                user_id_match = re.search(r'(?<=@)[a-z0-9_]+', insert, re.I)
                t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', insert, re.I)
                open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', event.text)
        
                if user_id_match:
                    user = user_id_match.group(0)
                elif t_me_match:
                    user = t_me_match.group(0)
                elif open_message_match:
                    user = open_message_match.group(0)
                else:
                    user = None
                    return
                
                await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {user}")
        else:
            pass
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {e}"
        print(error_message)        
        
        
 
async def dovebins(event, user_id, cur, game, client):
    try:
        sender = event.sender_id
        dov_users, pref_value = await get_user_data(cur, sender)
        print(f"{dov_users} and {dov_users[0]}")
        if (dov_users and dov_users[0]) == sender:
            command_parts = event.text.split(' ', 1)
            if len(command_parts) > 1:
                insert = command_parts[1].strip()
                user_id_match = re.search(r'(?<=@)[a-z0-9_]+', insert, re.I)
                t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', insert, re.I)
                open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', event.text)
        
                if user_id_match:
                    user = user_id_match.group(0)
                elif t_me_match:
                    user = t_me_match.group(0)
                elif open_message_match:
                    user = open_message_match.group(0)
                else:
                    user = None
                    return
                
                await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {user}")
        else:
            pass
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {e}"
        print(error_message)               
        
        
        
async def zhdob(event, user_id, cur, game, client):
        try:
            sender = event.sender_id
            if sender == user_id:
                match = re.match(r'^–∂–¥ (\S+) (\d+)$', event.text)
                if match:
                    user = match.group(1)
                    res = match.group(2)
                    data = ' '
                    print(f"{user} {res} {data}")
                    if user:
                        user_id_match = re.search(r'(?<=@)[a-z0-9_]+', user, re.I)
                        t_me_match = re.search(r'(?<=t\.me/)[a-z0-9_]+', user, re.I)
                        open_message_match = re.search(r'(?<=tg://openmessage\?user_id=)[0-9]+', user)
                
                        if user_id_match:
                            user = user_id_match.group(0)
                        elif t_me_match:
                            user = t_me_match.group(0)
                        elif open_message_match:
                            user = open_message_match.group(0)
                        else:
                            print("dalbaeb")
                            return
                           
                    print(f"{res}")
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        insert_query = """
                            INSERT OR REPLACE INTO zlst (user, res, data)
                            VALUES (?, ?, ?);
                        """
                        await cur.execute(insert_query, (user, res, data))
                        
                        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        update_query = """
                            UPDATE zlst SET res = ?, data = ? WHERE user = ?;
                        """
                        await cur.execute(update_query, (res, data, user))
                        await game.commit()
                        zars = (
                            f"üö∏ `@{user}` —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n"
                            f"üí∏ `{res}`\n"
                            f"üñãÔ∏è `{data}`"
                        )
    
                        await event.reply(zars, parse_mode='markdown')
                    except aiosqlite.IntegrityError:
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                        pass
                else:
                    print("superdalbaeb")
                    pass
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∂–¥: {e}")
                        
                        
                        
                        

async def zz(event, user_id, cur, game, client):           
    try:
        sender = event.sender_id
        if sender == user_id:
            msg = await event.get_reply_message()
            msg = msg.text.lower()
            
            if not msg or not msg.startswith("–±–∏–æ—Ç–æ–ø —á–º–æ–Ω–µ–π"):
                await event.edit("–ü–∞—Å–∫—É–¥–∞, —ç—Ç–æ –¥–ª—è –±–∏–æ—Ç–æ–ø–∞", parse_mode='markdown')
                return
                
            else:
                await event.edit("–û–∂–∏–¥–∞–Ω–∏–µ")
                result = re.findall(r'\[.*?\]\(tg://openmessage\?user_id=[a-z0-9_]+\) \| [\d,]+k', msg)
                user_list = []
                for match in result:
                    user_match = re.search(r'\[.*?\]\(tg://openmessage\?user_id=([a-z0-9_]+)\) \| ([\d,]+k)', match)
                    if user_match:
                        user, res_from_msg = user_match.group(1), user_match.group(2)
                        if 'k' in res_from_msg.lower():
                            res_from_msg = round(float(res_from_msg[:-1].replace(',', '.')) * 100)
                        else:
                            res_from_msg = round(float(res_from_msg.replace(',', '.')))
                        
                        try_count = 0
                        while True:
                            try:
                                await cur.execute("SELECT user, res FROM zlst WHERE user=?", (user,))
                                row = await cur.fetchone()

                                if row:
                                    user_res = int(row[1])
                                    res_diff = res_from_msg - user_res

                                    if res_diff > 0:
                                        user_list.append(f"üö∏ `@{user}` <¬ß> üí∏ {row[1]:,.0f} <¬ß> üëÅÔ∏è‚Äçüó®Ô∏è**+{res_diff:,.0f}**")
                                else:
                                    print("nananana")
                                    await cur.execute("SELECT user, res FROM zlst WHERE user=?", (user,))
                                    row = await cur.fetchone()

                                    if row:
                                        user_res = int(row[1])
                                        res_diff = res_from_msg - user_res
    
                                        if res_diff > 0:
                                            user_list.append(f"üö∏ `@{user}` <¬ß> üí∏ {row[1]:,.0f} <¬ß> üëÅÔ∏è‚Äçüó®Ô∏è**+{res_diff:,.0f}**")
                                    else:
                                        user_list.append(f"üö∏ `@{user}` <¬ß> üÜï")

                                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            except IndexError:
                                try_count += 1
                                if try_count > 5:
                                    raise  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

                                print("–û—à–∏–±–∫–∞ –≤ –∑–∑: IndexError, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

                await event.edit(f"{'ü´£–î—Ä–æ—á–∏–ª–æ–≤–æ —á–µ—Ä–µ–∑ 3... 2... 1...' if user_list else 'üßë‚Äçü¶Ω–•—É–π–Ω—è, –±—Ç —Å–¥–æ—Ö'}" + "\n\n" + ('\n'.join([f"{index + 1}. {line}" for index, line in enumerate(user_list)])), parse_mode="markdown")
        else:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∑–∑: {e}")
        
        
        
async def dovzz(event, user_id, cur, game, client):           
    try:
        sender = event.sender_id
        dov_users, pref_value = await get_user_data(cur, sender)
        await asyncio.sleep(0.4)
        if (dov_users and dov_users[0] == sender):
            msg = await event.get_reply_message()
            msg = msg.text.lower()
            
            if not msg or not msg.startswith("–±–∏–æ—Ç–æ–ø —á–º–æ–Ω–µ–π"):
                await event.reply("–ü–∞—Å–∫—É–¥–∞, —ç—Ç–æ –¥–ª—è –±–∏–æ—Ç–æ–ø–∞", parse_mode='markdown')
                return
                
            else:
                pizda = await event.reply("–û–∂–∏–¥–∞–Ω–∏–µ", parse_mode='markdown')
                
                result = re.findall(r'\[.*?\]\(tg://openmessage\?user_id=[a-z0-9_]+\) \| [\d,]+k', msg)
                user_list = []
                for match in result:
                    user_match = re.search(r'\[.*?\]\(tg://openmessage\?user_id=([a-z0-9_]+)\) \| ([\d,]+k)', match)
                    if user_match:
                        user, res_from_msg = user_match.group(1), user_match.group(2)
                        if 'k' in res_from_msg.lower():
                            res_from_msg = round(float(res_from_msg[:-1].replace(',', '.')) * 100)
                        else:
                            res_from_msg = round(float(res_from_msg.replace(',', '.')))
                        
                        try_count = 0
                        while True:
                            try:
                                await cur.execute("SELECT user, res FROM zlst WHERE user=?", (user,))
                                row = await cur.fetchone()

                                if row:
                                    user_res = int(row[1])
                                    res_diff = res_from_msg - user_res

                                    if res_diff > 0:
                                        user_list.append(f"üö∏ `@{user}` <¬ß> üí∏ {row[1]:,.0f} <¬ß> üëÅÔ∏è‚Äçüó®Ô∏è**+{res_diff:,.0f}**")
                                else:
                                    await cur.execute("SELECT user, res FROM zlst WHERE user=?", (user,))
                                    row = await cur.fetchone()

                                    if row:
                                        user_res = int(row[1])
                                        res_diff = res_from_msg - user_res
    
                                        if res_diff > 0:
                                            user_list.append(f"üö∏ `@{user}` <¬ß> üí∏ {row[1]:,.0f} <¬ß> üëÅÔ∏è‚Äçüó®Ô∏è**+{res_diff:,.0f}**")
                                    else:
                                        user_list.append(f"üö∏ `@{user}` <¬ß> üÜï")

                                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            except IndexError:
                                try_count += 1
                                if try_count > 5:
                                    raise  # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É

                                print("–û—à–∏–±–∫–∞ –≤ –¥–æ–≤–∑–∑: IndexError, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
                await pizda.edit(f"{'ü´£–î—Ä–æ—á–∏–ª–æ–≤–æ —á–µ—Ä–µ–∑ 3... 2... 1...' if user_list else 'üßë‚Äçü¶Ω–•—É–π–Ω—è, –±—Ç —Å–¥–æ—Ö'}" + "\n\n" + ('\n'.join([f"{index + 1}. {line}" for index, line in enumerate(user_list)])), parse_mode="markdown")
        else:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–≤–∑–∑: {e}")
                
                    
async def ping(event, user_id, client):
    try:
        sender = event.sender_id
        if sender == user_id:
            time1 = datetime.now()
            me = await client.get_me()
            time2 = datetime.now()
            time = (time2 - time1).microseconds / 1000
            time = round(time, 2)
            await event.edit(f"<b>–ü–∏–Ω–≥: {time}–º—Å</b>", parse_mode='html')
        else:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–∏–Ω–≥: {e}")
        
        
async def dovping(event, cur, user_id, client):
    try:
        sender = event.sender_id
        dov_users, pref_value = await get_user_data(cur, sender)
        if (dov_users and dov_users[0] == sender):
            time1 = datetime.now()
            me = await client.get_me()
            time2 = datetime.now()
            time = (time2 - time1).microseconds / 1000
            time = round(time, 2)
            await event.reply(f"<b>–ü–∏–Ω–≥: {time}–º—Å</b>", parse_mode='html')
        else:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–∏–Ω–≥: {e}")        
        
                        
                        
async def ebsp(client, event, user_id, cur, game):
    try:
        if event.is_reply:
            sender = event.sender_id
            if sender == user_id:
                user_id = str(user_id)
                sms = event.message
                sms = sms.text.lower()
                msg = await event.get_reply_message()
                msg_text = msg.text.lower()
                print(f"{msg_text}")
                
                
                if sms.startswith('–µ–± '):
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã '–∑'
                    selected_number = int(sms.split(' ')[1])
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    lines = msg_text.split('\n')
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ '–∑'
                    for line in lines:
                        if line.startswith(f"{selected_number}. "):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–π–¥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '–±–∏–æ–µ–± {–∞–π–¥–∏}' –≤ —á–∞—Ç
                            match = re.search(r'@([a-z0-9_]+)', line, re.I)
                            if match:
                                bio_id = match.group(1)
                                await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {bio_id}", parse_mode='markdown')
                                return
                            else:
                                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏.")
                                return
                else:
                    print("–ö–æ–º–∞–Ω–¥–∞ '–∑' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –µ–±: {e}")
        
        
async def dovebsp(client, event, user_id, cur, game):
    try:
        if event.is_reply:
            sender = event.sender_id
            dov_users, pref_value = await get_user_data(cur, sender)
        if (dov_users and dov_users[0] == sender):
                user_id = str(user_id)
                sms = event.message
                sms = sms.text.lower()
                msg = await event.get_reply_message()
                msg_text = msg.text.lower()
                print(f"{msg_text}")
                
                
                if sms.startswith(pref_value + '–µ–± '):
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã '–∑'
                    selected_number = int(sms.split(' ')[1])
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    lines = msg_text.split('\n')
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–µ '–∑'
                    for line in lines:
                        if line.startswith(f"{selected_number}. "):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–π–¥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '–±–∏–æ–µ–± {–∞–π–¥–∏}' –≤ —á–∞—Ç
                            match = re.search(r'@([a-z0-9_]+)', line, re.I)
                            if match:
                                bio_id = match.group(1)
                                await client.send_message(event.chat_id, f"–±–∏–æ–µ–± {bio_id}", parse_mode='markdown')
                                return
                            else:
                                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏.")
                                return
                else:
                    print("–ö–æ–º–∞–Ω–¥–∞ '–∑' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –µ–±: {e}")        
        
        
        
from telethon.tl import functions        
        
from telethon import errors

async def is_user_in_group(client, group_id, user_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
        participants = await client.get_participants(group_id)

        user_ids = [participant.id for participant in participants]

        return user_id in user_ids
    except errors.FloodWaitError as e:
        print(f"Error checking user in group: {e}")
        sys.exit()
    except errors.ChatAdminRequiredError as e:
        print(f"Error checking user in group: {e}")
        sys.exit()
    except errors.UserNotParticipantError as e:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
        sys.exit()
    except Exception as e:
        print(f"Error checking user in group: {e}")
        sys.exit()

async def check_license(client, user_id):
    group_id = -1002058510134  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã
    user_id_to_check = user_id
    is_user_present = await is_user_in_group(client, group_id, user_id_to_check)

    if not is_user_present:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
        sys.exit()
    else:
        pass
        
processed_messages = set()

async def main():
    global upt
    api_id, api_hash = await api()
    
    client = TelegramClient('byzantium', api_id, api_hash)
    await client.start()
    print('–ì–æ—Ç–æ–≤!')
    message = await client.send_message('me', '<pre><code>{\n    \"–°–¥–µ–ª–∞–ª\" : \"@wi7chblades\" \n    \"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\" : \"—Ö–µ–ª–ø\"\n}</code></pre>\n<b>–û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ:</b>\n    @nefris\n    @ZachemTiEtoChitaeshHaker', parse_mode='html')
    upt = datetime.now()
    game, cur = await open_database() 
    user_id = (await client.get_me()).id
    await check_license(client, user_id)
    try:
        @client.on(events.NewMessage())
        async def trg(event):
            try:
                sender = event.sender_id
                user_id = (await client.get_me()).id
                user_id1 = str(user_id)
                text_lower = event.text.lower()

                if (sender == user_id) or (sender == 6333102398):

                    if text_lower == ('–ª–∞').lower():
                        await la(event, user_id, cur, client)
                    if text_lower == ('—Ö–∏').lower():
                        await vac(event, cur, user_id, client)
                    if text_lower == ('–¥–æ—Å').lower():
                        await dos(event, user_id, cur, client)
                    if text_lower == ('–µ–∂–∞').lower():
                        await doh(event, user_id, client)
                    if text_lower == ('—Ñ–∞—Ä–º').lower():
                        await farm(event, cur, game, user_id)
                                         
                    if text_lower == ('—é–±').lower():
                        await ub(event, user_id, client)                    
                    if re.match(r'^\–ø—Ä–µ—Ñ (.+)$', text_lower):
                        await pref(event, user_id, cur, game)
                    if text_lower == (r'—Ö–µ–ª–ø').lower():
                        await cmd(event, user_id, cur, client)   
                    if text_lower == ('–¥–æ–≤').lower():
                        await dov(event, cur, game, user_id)
                    if text_lower == (r'–¥–æ–≤—ã').lower():
                        await help(event, user_id, cur, client)
                    if text_lower == ('—Ä–∞–≤').lower():
                        await rawtext(client, event, user_id)
                    if text_lower == ('–ø–∏–Ω–≥').lower():
                        await ping(event, user_id, client)
                                             
                    if re.match(r'^\–∑ (.+)$', text_lower):
                        await zins(event, user_id, cur, game, client)   
                    if text_lower == ('–∑').lower():
                        await z(client, event, user_id, cur, game)
                    if re.match(r'^\–∑–∞—Ä (.+)$', text_lower):
                        await zarlist(user_id, event, cur)
                    if re.match(r'^–∂–¥ (\S+) (\d+)$', text_lower):
                        await zhdob(event, user_id, cur, game, client)
                    if text_lower == ('–∑–∑').lower():
                        await zz(event, user_id, cur, game, client)
                        
                    if text_lower == ('–µ–±').lower():
                        await eb(client, event, user_id, cur, game)
                    if re.match(r'^–µ–± (\d+)', text_lower):
                        await ebsp(client, event, user_id, cur, game)
                    if re.match(r'^\–µ–± (.+)$', text_lower):
                        await ebins(event, user_id, cur, game, client)
                                                                        
                    if re.match(fr'üòé \[.*?\]\(tg://openmessage\?user_id={re.escape(user_id1)}\) –ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é', event.text):
                        await autozar(event, client, user_id, cur, game)
                        
                    else:
                        pass
                    
                    
            except Exception as e:
                print(f"Unexpected error: {e}")
                
        @client.on(events.NewMessage())
        async def trgdov(event):
            try:
                sender = event.sender_id
                user_id = (await client.get_me()).id
                text_lower = event.text.lower()
                await cur.execute('SELECT pref FROM dovpref')
                pref_value = await cur.fetchone()
                pref_value = str(pref_value[0]) if pref_value and pref_value[0] else '–¥–≤–∑–∑–¥'
                if text_lower.startswith(pref_value.lower()):
                                  
                    if text_lower == (pref_value + '–ª–∞').lower():
                        await dovla(event, user_id, cur, client)                    
                    if text_lower == (pref_value + '—Ö–∏').lower():
                        await dovvac(event, user_id, cur, client)
                                        
                    if text_lower == (pref_value + '–µ–±').lower():
                        await doveb(client, event, user_id, cur, game)
                    if re.search(f'{re.escape(pref_value)}–µ–± (\d+)$', text_lower):
                        await dovebsp(client, event, user_id, cur, game)
                    if re.search(f'{re.escape(pref_value)}–µ–± (.+)$', text_lower):
                        await dovebins(event, user_id, cur, game, client)
                                        
                    if text_lower == (pref_value + '–∑').lower():
                        await dovz(client, event, user_id, cur, game)
                    if re.search(f'{re.escape(pref_value)}–∑–∑', text_lower):
                        await dovzz(event, user_id, cur, game, client)
                    if re.search(f'{re.escape(pref_value)}–∑ (.+)$', text_lower):
                        await dovzins(event, user_id, cur, game, client)
                    if re.search(f'{re.escape(pref_value)}–∑–∞—Ä (.+)$', text_lower):
                        await dovzarlist(user_id, event, cur)
                                          
                    if text_lower == (pref_value + '—é–±').lower():
                        await dovub(event, cur, client)
                    if text_lower == (pref_value + '–ø–∏–Ω–≥').lower():
                        await dovping(event, cur, user_id, client)
                else:
                    pass
            
            except Exception as e2:
                print(f"Dovtrg error: {e2}")
            
            except errors.MessageNotModifiedError:
                pass
            
                
        await client.run_until_disconnected()
    finally:
        await close_database(game)

if __name__ == "__main__":
    asyncio.run(main())